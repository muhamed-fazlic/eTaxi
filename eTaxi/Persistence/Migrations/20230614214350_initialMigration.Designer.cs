// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eTaxi.Persistence.DatabaseContext.TaxiDatabaseContext;

#nullable disable

namespace eTaxi.Persistence.Migrations
{
    [DbContext(typeof(TaxiDatabaseContext))]
    [Migration("20230614214350_initialMigration")]
    partial class initialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CompanyAdmin",
                            NormalizedName = "COMPANYADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eTaxi.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 49, 73, DateTimeKind.Local).AddTicks(5721),
                            Name = "Sarajevo Taxi"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 49, 73, DateTimeKind.Local).AddTicks(5797),
                            Name = "Mostar Taxi"
                        });
                });

            modelBuilder.Entity("eTaxi.Domain.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite");
                });

            modelBuilder.Entity("eTaxi.Domain.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("eTaxi.Domain.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("eTaxi.Domain.HubStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("HubStation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocationId = 1,
                            Name = "Sarajevo Hub"
                        },
                        new
                        {
                            Id = 2,
                            LocationId = 3,
                            Name = "Mostar Hub"
                        },
                        new
                        {
                            Id = 3,
                            LocationId = 5,
                            Name = "Tuzla Hub"
                        });
                });

            modelBuilder.Entity("eTaxi.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Marsala Tita 12, Centar, Sarajevo, 71000, Bosnia and Herzegovina",
                            City = "Sarajevo",
                            Country = "BiH",
                            District = "Centar",
                            Latitude = 43.856299999999997,
                            Longitude = 18.4131,
                            PostalCode = "71000",
                            StreetName = "Marsala Tita",
                            StreetNumber = "12"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Dzemala Bijedica St 185, Sarajevo 71000",
                            City = "Sarajevo",
                            Country = "BiH",
                            District = "Sarajevo",
                            Latitude = 43.844961099999999,
                            Longitude = 18.337866200000001,
                            PostalCode = "71000",
                            StreetName = "Dzemala Bijedica",
                            StreetNumber = "185"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Maršala Tita 8, Stari Grad, Mostar, 88000, Bosnia and Herzegovina",
                            City = "Mostar",
                            Country = "BiH",
                            District = "Stari Grad",
                            Latitude = 43.342399999999998,
                            Longitude = 17.808900000000001,
                            PostalCode = "88000",
                            StreetName = "Maršala Tita",
                            StreetNumber = "8"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Aleja Bosne Srebrene 15, Novi Grad, Sarajevo, 71000, Bosnia and Herzegovina",
                            City = "Sarajevo",
                            Country = "BiH",
                            District = "Novi Grad",
                            Latitude = 43.870800000000003,
                            Longitude = 18.4314,
                            PostalCode = "71000",
                            StreetName = "Aleja Bosne Srebrene",
                            StreetNumber = "15"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Titova 3, Centar, Tuzla, 75000, Bosnia and Herzegovina",
                            City = "Tuzla",
                            Country = "BiH",
                            District = "Centar",
                            Latitude = 44.534999999999997,
                            Longitude = 18.671399999999998,
                            PostalCode = "75000",
                            StreetName = "Titova",
                            StreetNumber = "3"
                        },
                        new
                        {
                            Id = 6,
                            Address = "VCJ7+59H, Patriotske lige 58, Sarajevo 71000",
                            City = "Sarajevo",
                            Country = "BiH",
                            District = "Centar",
                            Latitude = 43.874206600000001,
                            Longitude = 18.408753399999998,
                            PostalCode = "71000",
                            StreetName = "Patriotske lige",
                            StreetNumber = "58"
                        });
                });

            modelBuilder.Entity("eTaxi.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CancelReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EndLocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelfDrive")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("StartLocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserDriverId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EndLocationId");

                    b.HasIndex("StartLocationId");

                    b.HasIndex("UserDriverId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9525),
                            EndLocationId = 2,
                            EndTime = new DateTime(2023, 6, 15, 1, 43, 50, 100, DateTimeKind.Local).AddTicks(9541),
                            IsActive = true,
                            IsCanceled = false,
                            IsSelfDrive = false,
                            PaymentMethod = "Online",
                            Price = 36.0,
                            StartLocationId = 1,
                            StartTime = new DateTime(2023, 6, 15, 0, 43, 50, 100, DateTimeKind.Local).AddTicks(9532),
                            UserDriverId = 3,
                            UserId = 8,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9554),
                            EndLocationId = 3,
                            EndTime = new DateTime(2023, 6, 15, 3, 43, 50, 100, DateTimeKind.Local).AddTicks(9561),
                            IsActive = true,
                            IsCanceled = false,
                            IsSelfDrive = false,
                            PaymentMethod = "Gotovina",
                            Price = 357.0,
                            StartLocationId = 2,
                            StartTime = new DateTime(2023, 6, 15, 1, 43, 50, 100, DateTimeKind.Local).AddTicks(9559),
                            UserDriverId = 4,
                            UserId = 7,
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9565),
                            EndLocationId = 6,
                            EndTime = new DateTime(2023, 6, 14, 22, 43, 50, 100, DateTimeKind.Local).AddTicks(9571),
                            IsActive = false,
                            IsCanceled = false,
                            IsSelfDrive = false,
                            PaymentMethod = "Gotovina",
                            Price = 83.700000000000003,
                            StartLocationId = 4,
                            StartTime = new DateTime(2023, 6, 14, 21, 43, 50, 100, DateTimeKind.Local).AddTicks(9569),
                            UserDriverId = 5,
                            UserId = 8,
                            VehicleId = 3
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9574),
                            EndLocationId = 1,
                            EndTime = new DateTime(2023, 6, 13, 21, 43, 50, 100, DateTimeKind.Local).AddTicks(9581),
                            IsActive = false,
                            IsCanceled = false,
                            IsSelfDrive = false,
                            PaymentMethod = "Online",
                            Price = 1210.0,
                            StartLocationId = 5,
                            StartTime = new DateTime(2023, 6, 13, 19, 43, 50, 100, DateTimeKind.Local).AddTicks(9577),
                            UserDriverId = 6,
                            UserId = 4,
                            VehicleId = 4
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9583),
                            EndLocationId = 1,
                            EndTime = new DateTime(2023, 6, 11, 19, 43, 50, 100, DateTimeKind.Local).AddTicks(9589),
                            IsActive = true,
                            IsCanceled = false,
                            IsSelfDrive = false,
                            PaymentMethod = "Gotovina",
                            Price = 500.0,
                            StartLocationId = 3,
                            StartTime = new DateTime(2023, 6, 11, 17, 43, 50, 100, DateTimeKind.Local).AddTicks(9587),
                            UserDriverId = 7,
                            UserId = 8,
                            VehicleId = 5
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9593),
                            EndLocationId = 1,
                            EndTime = new DateTime(2023, 6, 15, 0, 3, 50, 100, DateTimeKind.Local).AddTicks(9702),
                            IsActive = true,
                            IsCanceled = false,
                            IsSelfDrive = false,
                            PaymentMethod = "Online",
                            Price = 32.299999999999997,
                            StartLocationId = 6,
                            StartTime = new DateTime(2023, 6, 14, 23, 45, 50, 100, DateTimeKind.Local).AddTicks(9698),
                            UserDriverId = 3,
                            UserId = 6,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 7,
                            CancelReason = "Pokvareno vozilo",
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9706),
                            EndLocationId = 1,
                            EndTime = new DateTime(2023, 6, 14, 14, 43, 50, 100, DateTimeKind.Local).AddTicks(9713),
                            IsActive = false,
                            IsCanceled = true,
                            IsSelfDrive = false,
                            PaymentMethod = "Gotovina",
                            Price = 36.0,
                            StartLocationId = 2,
                            StartTime = new DateTime(2023, 6, 14, 12, 43, 50, 100, DateTimeKind.Local).AddTicks(9711),
                            UserDriverId = 3,
                            UserId = 5,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9716),
                            EndLocationId = 4,
                            EndTime = new DateTime(2023, 6, 13, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9721),
                            IsActive = false,
                            IsCanceled = false,
                            IsSelfDrive = false,
                            PaymentMethod = "Gotovina",
                            Price = 78.0,
                            StartLocationId = 1,
                            StartTime = new DateTime(2023, 6, 13, 22, 43, 50, 100, DateTimeKind.Local).AddTicks(9719),
                            UserDriverId = 6,
                            VehicleId = 4
                        });
                });

            modelBuilder.Entity("eTaxi.Domain.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("UserDriverId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserDriverId");

                    b.HasIndex("UserId");

                    b.ToTable("Rating");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Odlična vožnja, vozač je bio veoma ljubazan i profesionalan.",
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9778),
                            Grade = 5,
                            OrderId = 6,
                            UserDriverId = 3,
                            UserId = 6
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Sjajno iskustvo, vozač je bio veoma pristojan i vozilo je bilo čisto i udobno.",
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9795),
                            Grade = 5,
                            OrderId = 4,
                            UserDriverId = 6,
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            Comment = "taxi nikad nije ni dosao. Navodno se pokvarilo vozilo",
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9798),
                            Grade = 2,
                            OrderId = 7,
                            UserDriverId = 3,
                            UserId = 5
                        });
                });

            modelBuilder.Entity("eTaxi.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Pin")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "775531be-b8d0-42aa-9847-5c8237054161",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "eTaxi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEH1LP7SYcHyzFBt5pio9QesUb0ONSy92NmwNgfw0hF2rhBCVZ9bKFSsqdqnSlaHrLg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            CompanyId = 1,
                            ConcurrencyStamp = "2ea9926a-9d18-42c6-9634-dfebca8663fc",
                            Email = "kompanija@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Sarajevo",
                            LastName = "Taxi",
                            LockoutEnabled = false,
                            NormalizedEmail = "KOMPANIJA@ADMIN.COM",
                            NormalizedUserName = "KOMPANIJA SARAJEVO",
                            PasswordHash = "AQAAAAIAAYagAAAAEPmT95zRgxFQlorMTEFjcUi9Cl3s00abXKbWnswoYeI0S1m4zGzB0eit76nVLweCnQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "kompanija Sarajevo"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b7d0e08-81f6-4321-afa7-52acc888142e",
                            Email = "user1@taxi.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "br1",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@TAXI.COM",
                            NormalizedUserName = "USER BR1",
                            PasswordHash = "AQAAAAIAAYagAAAAEPNh4Nsj2+6w9plxGlfoZ0c5LjBmalLHqljL6NhgEryvOLcY6+gemgJFgLhn8LTItg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user br1"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af517832-f922-402c-be08-db07f81d4647",
                            Email = "user2@taxi.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "br2",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@TAXI.COM",
                            NormalizedUserName = "USER BR2",
                            PasswordHash = "AQAAAAIAAYagAAAAEEoFLIEsPiSu0D5Gm3FaCINTUc8mQ1Jhc/X+Bqa6IjnHWhzGAIkfnGfdmcC64vUI5Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user br2"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f60017c-cd51-42e5-b072-57eb09f9a1b7",
                            Email = "user3@taxi.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "br3",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@TAXI.COM",
                            NormalizedUserName = "USER BR3",
                            PasswordHash = "AQAAAAIAAYagAAAAEMT6/A+Gj4xhePby4HADEG241XXlltiEPwNnYBpwAtXq3YOy7nPWYGXcYfsVQotoPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user br3"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce9413e3-8cf0-4774-bb84-e96fb073f091",
                            Email = "user4@taxi.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "br4",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@TAXI.COM",
                            NormalizedUserName = "USER BR4",
                            PasswordHash = "AQAAAAIAAYagAAAAEOULswAjxjXTTEi45XPdTh3LmvKJZV8b0LessaPAkfHcAfIGaQi2CGbkzISg1cA7zw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user br4"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b130c48-cf24-4395-b2f6-2a6b5539d3a8",
                            Email = "user5@taxi.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "br5",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@TAXI.COM",
                            NormalizedUserName = "USER BR5",
                            PasswordHash = "AQAAAAIAAYagAAAAEFyTRpZubz9nQLH61/jlU0v1Isvlw131HOtU/tGD46r+VFg57y9PCJw9CvNXVW1v+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user br5"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5585649-78ea-493a-93ea-0a9208fee9ad",
                            Email = "user6@taxi.com",
                            EmailConfirmed = true,
                            FirstName = "User",
                            LastName = "br6",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@TAXI.COM",
                            NormalizedUserName = "USER BR6",
                            PasswordHash = "AQAAAAIAAYagAAAAEOydW1pUBZh67a6GHNOaDSMjiiLW9ndX8AtGdyxkn8cStCL14TP1X7oAVr+aeLg0Lg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user br6"
                        });
                });

            modelBuilder.Entity("eTaxi.Domain.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AirBag")
                        .HasColumnType("bit");

                    b.Property<bool>("AirCondition")
                        .HasColumnType("bit");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentLocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("KmTraveled")
                        .HasColumnType("float");

                    b.Property<string>("LicenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PricePerKm")
                        .HasColumnType("float");

                    b.Property<string>("Transmission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserDriverId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CurrentLocationId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserDriverId");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AirBag = true,
                            AirCondition = true,
                            Brand = "Audi",
                            Color = "Siva",
                            CompanyId = 1,
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9257),
                            FuelType = "Benzin",
                            ImageUrl = "https://res.cloudinary.com/doswamdah/image/upload/v1656523883/rs2/audia8_gckbfh.png",
                            KmTraveled = 50000.0,
                            LicenceNumber = "ABC123",
                            Name = "Audi A8",
                            PricePerKm = 6.0,
                            Transmission = "Automatic",
                            TypeId = 2,
                            UserDriverId = 3,
                            Year = 2019
                        },
                        new
                        {
                            Id = 2,
                            AirBag = true,
                            AirCondition = true,
                            Brand = "Volkswagen",
                            Color = "Siva",
                            CompanyId = 1,
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9321),
                            FuelType = "Dizel",
                            ImageUrl = "https://res.cloudinary.com/doswamdah/image/upload/v1656523879/rs2/golf_7_didjje.jpg",
                            KmTraveled = 80000.0,
                            LicenceNumber = "XYZ789",
                            Name = "Volkswagen Golf 7",
                            PricePerKm = 3.0,
                            Transmission = "Manual",
                            TypeId = 1,
                            UserDriverId = 4,
                            Year = 2017
                        },
                        new
                        {
                            Id = 3,
                            AirBag = true,
                            AirCondition = true,
                            Brand = "BMW",
                            Color = "Plava",
                            CompanyId = 1,
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9450),
                            FuelType = "Dizel",
                            ImageUrl = "https://res.cloudinary.com/doswamdah/image/upload/v1686762738/bmw-x5_qbbvec.jpg",
                            KmTraveled = 60000.0,
                            LicenceNumber = "DEF456",
                            Name = "BMW X5",
                            PricePerKm = 9.0,
                            Transmission = "Automatic",
                            TypeId = 3,
                            UserDriverId = 5,
                            Year = 2020
                        },
                        new
                        {
                            Id = 4,
                            AirBag = true,
                            AirCondition = true,
                            Brand = "Mercedes",
                            Color = "White",
                            CompanyId = 2,
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9457),
                            FuelType = "Benzin",
                            ImageUrl = "https://res.cloudinary.com/doswamdah/image/upload/v1686765411/benz-c-class_msuspq.jpg",
                            KmTraveled = 40000.0,
                            LicenceNumber = "GHI789",
                            Name = "Mercedes-Benz C-Class",
                            PricePerKm = 10.0,
                            Transmission = "Automatic",
                            TypeId = 2,
                            UserDriverId = 6,
                            Year = 2021
                        },
                        new
                        {
                            Id = 5,
                            AirBag = true,
                            AirCondition = false,
                            Brand = "Audi",
                            Color = "Red",
                            DateCreated = new DateTime(2023, 6, 14, 23, 43, 50, 100, DateTimeKind.Local).AddTicks(9461),
                            FuelType = "Dizel",
                            ImageUrl = "https://res.cloudinary.com/doswamdah/image/upload/v1686765730/Audi_A3_snaxht.webp",
                            KmTraveled = 55000.0,
                            LicenceNumber = "JKL012",
                            Name = "Audi A3",
                            PricePerKm = 4.0,
                            Transmission = "Automatic",
                            TypeId = 1,
                            UserDriverId = 7,
                            Year = 2016
                        });
                });

            modelBuilder.Entity("eTaxi.Domain.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VehicleType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://res.cloudinary.com/doswamdah/image/upload/v1656661697/rs2/car_l5aypi.png",
                            NumberOfSeats = 4,
                            Type = "Malo auto"
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://res.cloudinary.com/doswamdah/image/upload/v1656661697/rs2/sedan_j0oo9s.png",
                            NumberOfSeats = 5,
                            Type = "Limuzina"
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://res.cloudinary.com/doswamdah/image/upload/v1656661697/rs2/SUV_hjqwbi.png",
                            NumberOfSeats = 5,
                            Type = "SUV"
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://res.cloudinary.com/doswamdah/image/upload/v1656661697/rs2/Bus_ogtv6k.png",
                            NumberOfSeats = 9,
                            Type = "MiniVan"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("eTaxi.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("eTaxi.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTaxi.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("eTaxi.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eTaxi.Domain.Favorite", b =>
                {
                    b.HasOne("eTaxi.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTaxi.Domain.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eTaxi.Domain.Feedback", b =>
                {
                    b.HasOne("eTaxi.Domain.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("eTaxi.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTaxi.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("eTaxi.Domain.File", b =>
                {
                    b.HasOne("eTaxi.Domain.Feedback", "Feedback")
                        .WithMany("Files")
                        .HasForeignKey("FeedbackId");

                    b.HasOne("eTaxi.Domain.User", "User")
                        .WithMany("Files")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eTaxi.Domain.HubStation", b =>
                {
                    b.HasOne("eTaxi.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("eTaxi.Domain.Order", b =>
                {
                    b.HasOne("eTaxi.Domain.Location", "EndLocation")
                        .WithMany()
                        .HasForeignKey("EndLocationId");

                    b.HasOne("eTaxi.Domain.Location", "StartLocation")
                        .WithMany()
                        .HasForeignKey("StartLocationId");

                    b.HasOne("eTaxi.Domain.User", "UserDriver")
                        .WithMany()
                        .HasForeignKey("UserDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTaxi.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("eTaxi.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndLocation");

                    b.Navigation("StartLocation");

                    b.Navigation("User");

                    b.Navigation("UserDriver");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("eTaxi.Domain.Rating", b =>
                {
                    b.HasOne("eTaxi.Domain.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("eTaxi.Domain.User", "UserDriver")
                        .WithMany()
                        .HasForeignKey("UserDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTaxi.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Order");

                    b.Navigation("User");

                    b.Navigation("UserDriver");
                });

            modelBuilder.Entity("eTaxi.Domain.User", b =>
                {
                    b.HasOne("eTaxi.Domain.Company", "Company")
                        .WithMany("Drivers")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("eTaxi.Domain.Vehicle", b =>
                {
                    b.HasOne("eTaxi.Domain.Company", "Company")
                        .WithMany("Vehicles")
                        .HasForeignKey("CompanyId");

                    b.HasOne("eTaxi.Domain.Location", "CurrentLocation")
                        .WithMany()
                        .HasForeignKey("CurrentLocationId");

                    b.HasOne("eTaxi.Domain.VehicleType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTaxi.Domain.User", "UserDriver")
                        .WithMany()
                        .HasForeignKey("UserDriverId");

                    b.Navigation("Company");

                    b.Navigation("CurrentLocation");

                    b.Navigation("Type");

                    b.Navigation("UserDriver");
                });

            modelBuilder.Entity("eTaxi.Domain.Company", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("eTaxi.Domain.Feedback", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("eTaxi.Domain.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
